[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrés Cruz. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cruz (2024). rlazycartesian: R Interface Lazy Cartesian Products. R package version 0.1, https://github.com/arcruz0/rlazycartesian.","code":"@Manual{,   title = {rlazycartesian: R Interface for Lazy Cartesian Products},   author = {Andrés Cruz},   year = {2024},   note = {R package version 0.1},   url = {https://github.com/arcruz0/rlazycartesian}, }"},{"path":"/index.html","id":"rlazycartesian","dir":"","previous_headings":"","what":"R Interface for Lazy Cartesian Products","title":"R Interface for Lazy Cartesian Products","text":"[Documentation] R interface Lazy Cartesian Products. Provides memory-efficient ways obtain elements (including random samples) Cartesian Products. Partial wrapper lazy-cartesian-product C++ library.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface for Lazy Cartesian Products","text":"","code":"install.packages(\"remotes\") # if not installed remotes::install_github(\"arcruz0/rlazycartesian\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R Interface for Lazy Cartesian Products","text":"Suppose need random sample 1,000 elements Cartesian Product. rlazycartesian can without generating elements advance (expand.grid() ), fast consumes little RAM—see Benchmarks .","code":"l <- list(x = paste0(\"x\", 1:500, sep = \"\"),           y = paste0(\"y\", 1:500, sep = \"\"),           z = paste0(\"z\", 1:500, sep = \"\"))  set.seed(1) head(rlazycartesian::get_random_sample(l, 1000)) #>   .element    x    y    z #> 1 66608964 x267 y218 z464 #> 2 44492929 x178 y486 z429 #> 3 60941821 x244 y384 z321 #> 4 30845227 x124 y191 z227 #> 5 17633234  x71 y267 z234 #> 6 79310131 x318 y121 z131"},{"path":"/index.html","id":"a-note-on-element-indices-and-expandgrid","dir":"","previous_headings":"","what":"A note on element indices and expand.grid()","title":"R Interface for Lazy Cartesian Products","text":"Element indices rlazycartesian equivalent indices sorted expand.grid():","code":"rlazycartesian::get_elements(l, c(12345, 98765)) #>   .element  x    y    z #> 1    12345 x1  y25 z345 #> 2    98765 x1 y198 z265  eg <- expand.grid(l) eg <- eg[order(eg$x, eg$y, eg$z),] rownames(eg) <- NULL eg[c(12345, 98765),] #>        x    y    z #> 12345 x1  y25 z345 #> 98765 x1 y198 z265"},{"path":"/index.html","id":"benchmarks","dir":"","previous_headings":"","what":"Benchmarks","title":"R Interface for Lazy Cartesian Products","text":"random sample example , compare performance (Elapsed_Time_sec) peak RAM usage (Peak_RAM_Used_MiB):","code":"peakRAM::peakRAM(   rlazycartesian::get_random_sample(l, 1000),   {eg <- expand.grid(l); eg[sample(1:nrow(eg), 1000),]} ) #>                                      Function_Call Elapsed_Time_sec #> 1        rlazycartesian::get_random_sample(l,1000)            0.095 #> 2 {eg<-expand.grid(l)eg[sample(1:nrow(eg),1000),]}            4.538 #>   Total_RAM_Used_MiB Peak_RAM_Used_MiB #> 1                0.9               6.8 #> 2             1430.6            1907.4"},{"path":"/reference/get_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily retrieve elements from a Cartesian product — get_elements","title":"Lazily retrieve elements from a Cartesian product — get_elements","text":"function lazily retrieves elements Cartesian product, given vector indices.","code":""},{"path":"/reference/get_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily retrieve elements from a Cartesian product — get_elements","text":"","code":"get_elements(l, indices, index_colname = \".element\")"},{"path":"/reference/get_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily retrieve elements from a Cartesian product — get_elements","text":"l named list combinations Cartesian product. indices numeric vector indices elements retrieve. index_colname string column name indices output data frame. default, \".element\".","code":""},{"path":"/reference/get_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily retrieve elements from a Cartesian product — get_elements","text":"data frame row element Cartesian product.","code":""},{"path":"/reference/get_elements.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lazily retrieve elements from a Cartesian product — get_elements","text":"Burdsall, T. (2018). lazy-cartesian-product: .hpp library efficiently generate combinations using Lazy Cartesian Product algorithm. https://github.com/tylerburdsall/lazy-cartesian-product","code":""},{"path":"/reference/get_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily retrieve elements from a Cartesian product — get_elements","text":"","code":"l <- list(color = c(\"Red\", \"Blue\", \"Yellow\"),           shape = c(\"Square\", \"Circle\"))  get_elements(l, c(2, 4)) #>   .element color  shape #> 1        2   Red Circle #> 2        4  Blue Circle"},{"path":"/reference/get_random_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily get random sample from a Cartesian product — get_random_sample","title":"Lazily get random sample from a Cartesian product — get_random_sample","text":"function lazily retrieves random sample Cartesian product","code":""},{"path":"/reference/get_random_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily get random sample from a Cartesian product — get_random_sample","text":"","code":"get_random_sample(l, n_sample, index_colname = \".element\")"},{"path":"/reference/get_random_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily get random sample from a Cartesian product — get_random_sample","text":"l named list combinations Cartesian product. n_sample number number elements sampled. index_colname string column name indices output data frame. default, \".element\".","code":""},{"path":"/reference/get_random_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily get random sample from a Cartesian product — get_random_sample","text":"data frame row element Cartesian product.","code":""},{"path":"/reference/get_random_sample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lazily get random sample from a Cartesian product — get_random_sample","text":"Burdsall, T. (2018). lazy-cartesian-product: .hpp library efficiently generate combinations using Lazy Cartesian Product algorithm. https://github.com/tylerburdsall/lazy-cartesian-product","code":""},{"path":"/reference/get_random_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily get random sample from a Cartesian product — get_random_sample","text":"","code":"l <- list(color = c(\"Red\", \"Blue\", \"Yellow\"),           shape = c(\"Square\", \"Circle\"))  get_random_sample(l, 3) #>   .element  color  shape #> 1        5 Yellow Square #> 2        4   Blue Circle #> 3        3   Blue Square"},{"path":"/reference/get_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Lazily get the total number of elements in a Cartesian product — get_size","title":"Lazily get the total number of elements in a Cartesian product — get_size","text":"function lazily retrieves total number elements Cartesian product","code":""},{"path":"/reference/get_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lazily get the total number of elements in a Cartesian product — get_size","text":"","code":"get_size(l)"},{"path":"/reference/get_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lazily get the total number of elements in a Cartesian product — get_size","text":"l named list combinations Cartesian product.","code":""},{"path":"/reference/get_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lazily get the total number of elements in a Cartesian product — get_size","text":"number.","code":""},{"path":"/reference/get_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lazily get the total number of elements in a Cartesian product — get_size","text":"","code":"l <- list(color = c(\"Red\", \"Blue\", \"Yellow\"),           shape = c(\"Square\", \"Circle\"))  get_size(l) #> [1] 6"}]
